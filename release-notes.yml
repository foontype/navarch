"v0.0.1": |
  Initial release of NAVARCH - A Bash-based CLI system for managing project dependencies and configurations.

  ## Features
  - Single script architecture for simplicity and portability
  - Support for `atlas.navarch` configuration files
  - Vendor dependency management with GitHub repository support
  - Intelligent caching system for vendor dependencies
  - Lifecycle functions: build, up, down, clean
  - Environment variable loading from files
  - Local directory inclusion support
  - POSIX compatible with Bash 4.0+ requirement

  ## Components
  - Main CLI script: `src/navarch`
  - Comprehensive test suite using BATS
  - Example configuration: `atlas.navarch`
  - Development tools integration (ShellCheck, shfmt)

  ## Installation
  ```bash
  # Download and install
  curl -sSL https://raw.githubusercontent.com/foontype/navarch/main/install.sh | bash
  
  # Or manual installation
  chmod +x src/navarch
  ln -s $(pwd)/src/navarch ~/.local/bin/navarch
  ```

  This is the foundational release establishing the core architecture and functionality of NAVARCH.

"v0.0.2": |
  Plugin system implementation and developer experience improvements.

  ## New Features
  - **Plugin System**
    - Added `plugin` directive for loading external bash functions
    - Added `task` directive for executing external task files
    - Recursive atlas.navarch sourcing with cycle prevention
    - Plugin execution support in vendor and current directories
  
  - **Developer Experience**
    - Added navarch to PATH in devcontainer for easier development
    - Added language guidelines (Japanese for chat, English for code)
    - Improved VS Code settings with disabled compact folders

  ## Improvements
  - Enhanced example configurations with task directive and sample plugins
  - Better path resolution for task directives
  - Improved exit code propagation throughout the system
  - Refactored vendor directory calculation for better performance
  - Track dependency directories instead of URLs/paths

  ## Bug Fixes
  - Fixed task directive implementation for proper loading and execution
  - Fixed workflow badge reference in documentation
  - Resolved ShellCheck warnings for better code quality
  - Fixed switch case indentation with proper formatting

  ## Code Quality
  - Applied consistent code formatting with shfmt
  - Added formatting guidelines to documentation
  - Improved error handling and logging

  ## Examples
  ### Using the plugin directive
  ```bash
  # In atlas.navarch
  plugin ./plugins/my-functions.sh
  ```

  ### Using the task directive  
  ```bash
  # In atlas.navarch
  task ./tasks/deploy.sh
  
  # Execute the task
  navarch run deploy
  ```

  Fully backward compatible with v0.0.1 configurations.